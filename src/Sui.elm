module Sui exposing
    ( Base64(..)
    , BigInt(..)
    , DateTime(..)
    , Id(..)
    , Json(..)
    , MoveData(..)
    , MoveTypeLayout(..)
    , MoveTypeSignature(..)
    , Mutation
    , OpenMoveTypeSignature(..)
    , Option
    , Query
    , SuiAddress(..)
    , Uint53(..)
    , absent
    , base64
    , batch
    , bigInt
    , dateTime
    , id
    , json
    , map
    , map2
    , moveData
    , moveTypeLayout
    , moveTypeSignature
    , mutation
    , mutationTask
    , null
    , openMoveTypeSignature
    , present
    , query
    , queryTask
    , suiAddress
    , uint53
    )

{-|
This is a file generated by `elm-gql` when you ran `elm-gql init`!

It's yours now to do whatever you want with.

This file does include decoders and encoders for all the Scalars for your GQL endpoint.  You'll need to make sure they are implemented correctly.

## Queries

@docs Query, query, queryTask

## Mutations

@docs Mutation, mutation, mutationTask

## Optional Inputs

@docs null, absent, present, Option

## Batching and Mapping

@docs batch, map, map2

## Scalar Decoders and Encoders

@docs Base64, base64, BigInt, bigInt, DateTime, dateTime, Id, id, Json, json, MoveData, moveData, MoveTypeLayout, moveTypeLayout, MoveTypeSignature, moveTypeSignature, OpenMoveTypeSignature, openMoveTypeSignature, SuiAddress, suiAddress, Uint53, uint53
-}


import GraphQL.Engine
import Http
import Json.Decode
import Json.Encode
import Task


type alias Query data =
    GraphQL.Engine.Selection GraphQL.Engine.Query data


type alias Mutation data =
    GraphQL.Engine.Selection GraphQL.Engine.Mutation data


type alias Selection source data =
    GraphQL.Engine.Selection source data


query :
    Query data
    -> { headers : List Http.Header
    , url : String
    , timeout : Maybe Float
    , tracker : Maybe String
    }
    -> Cmd.Cmd (Result GraphQL.Engine.Error data)
query sel options =
    GraphQL.Engine.query sel options


mutation :
    Mutation data
    -> { headers : List Http.Header
    , url : String
    , timeout : Maybe Float
    , tracker : Maybe String
    }
    -> Cmd.Cmd (Result GraphQL.Engine.Error data)
mutation sel options =
    GraphQL.Engine.mutation sel options


queryTask :
    Query data
    -> { headers : List Http.Header, url : String, timeout : Maybe Float }
    -> Task.Task GraphQL.Engine.Error data
queryTask sel options =
    GraphQL.Engine.queryTask sel options


mutationTask :
    Mutation data
    -> { headers : List Http.Header, url : String, timeout : Maybe Float }
    -> Task.Task GraphQL.Engine.Error data
mutationTask sel options =
    GraphQL.Engine.mutationTask sel options


null : Option value
null =
    GraphQL.Engine.Null


absent : Option value
absent =
    GraphQL.Engine.Absent


present : input -> Option input
present input =
    GraphQL.Engine.Present input


type alias Option input =
    GraphQL.Engine.Option input


batch : List (Selection source data) -> Selection source (List data)
batch =
    GraphQL.Engine.batch


map : (a -> b) -> Selection source a -> Selection source b
map =
    GraphQL.Engine.map


map2 :
    (a -> b -> c)
    -> Selection source a
    -> Selection source b
    -> Selection source c
map2 =
    GraphQL.Engine.map2


type alias Codec scalar =
    { encode : scalar -> Json.Encode.Value
    , decoder : Json.Decode.Decoder scalar
    , defaultTestingValue : scalar
    }


type Base64
    = Base64 String


base64 : Codec Base64
base64 =
    { encode =
        \val ->
            case val of
                Base64 str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Base64 Json.Decode.string
    , defaultTestingValue = Base64 "REPLACE ME!"
    }


type BigInt
    = BigInt String


bigInt : Codec BigInt
bigInt =
    { encode =
        \val ->
            case val of
                BigInt str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map BigInt Json.Decode.string
    , defaultTestingValue = BigInt "REPLACE ME!"
    }


type DateTime
    = DateTime String


dateTime : Codec DateTime
dateTime =
    { encode =
        \val ->
            case val of
                DateTime str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map DateTime Json.Decode.string
    , defaultTestingValue = DateTime "REPLACE ME!"
    }


type Id
    = Id String


id : Codec Id
id =
    { encode =
        \val ->
            case val of
                Id str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Id Json.Decode.string
    , defaultTestingValue = Id "REPLACE ME!"
    }


type Json
    = Json String


json : Codec Json
json =
    { encode =
        \val ->
            case val of
                Json str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Json Json.Decode.string
    , defaultTestingValue = Json "REPLACE ME!"
    }


type MoveData
    = MoveData String


moveData : Codec MoveData
moveData =
    { encode =
        \val ->
            case val of
                MoveData str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map MoveData Json.Decode.string
    , defaultTestingValue = MoveData "REPLACE ME!"
    }


type MoveTypeLayout
    = MoveTypeLayout String


moveTypeLayout : Codec MoveTypeLayout
moveTypeLayout =
    { encode =
        \val ->
            case val of
                MoveTypeLayout str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map MoveTypeLayout Json.Decode.string
    , defaultTestingValue = MoveTypeLayout "REPLACE ME!"
    }


type MoveTypeSignature
    = MoveTypeSignature String


moveTypeSignature : Codec MoveTypeSignature
moveTypeSignature =
    { encode =
        \val ->
            case val of
                MoveTypeSignature str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map MoveTypeSignature Json.Decode.string
    , defaultTestingValue = MoveTypeSignature "REPLACE ME!"
    }


type OpenMoveTypeSignature
    = OpenMoveTypeSignature String


openMoveTypeSignature : Codec OpenMoveTypeSignature
openMoveTypeSignature =
    { encode =
        \val ->
            case val of
                OpenMoveTypeSignature str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map OpenMoveTypeSignature Json.Decode.string
    , defaultTestingValue = OpenMoveTypeSignature "REPLACE ME!"
    }


type SuiAddress
    = SuiAddress String


suiAddress : Codec SuiAddress
suiAddress =
    { encode =
        \val ->
            case val of
                SuiAddress str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map SuiAddress Json.Decode.string
    , defaultTestingValue = SuiAddress "REPLACE ME!"
    }


type Uint53
    = Uint53 String


uint53 : Codec Uint53
uint53 =
    { encode =
        \val ->
            case val of
                Uint53 str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Uint53 Json.Decode.string
    , defaultTestingValue = Uint53 "REPLACE ME!"
    }